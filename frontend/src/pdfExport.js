import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

export const exportFeedbackToPDF = async (feedbackData, isCurrentSession = false) => {
  try {
    const pdf = new jsPDF();
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    const margin = 20;
    let yPosition = margin;

    // Helper function to add text with word wrapping
    const addWrappedText = (text, x, y, maxWidth, lineHeight = 6) => {
      const words = text.split(' ');
      let line = '';
      let currentY = y;

      for (let i = 0; i < words.length; i++) {
        const testLine = line + words[i] + ' ';
        const testWidth = pdf.getStringUnitWidth(testLine) * pdf.internal.scaleFactor;
        
        if (testWidth > maxWidth && line !== '') {
          pdf.text(line.trim(), x, currentY);
          line = words[i] + ' ';
          currentY += lineHeight;
        } else {
          line = testLine;
        }
      }
      
      if (line.trim() !== '') {
        pdf.text(line.trim(), x, currentY);
        currentY += lineHeight;
      }
      
      return currentY;
    };

    // Header
    pdf.setFontSize(20);
    pdf.setFont('helvetica', 'bold');
    pdf.text('ðŸŽ“ Learning Feedback Report', pageWidth / 2, yPosition, { align: 'center' });
    yPosition += 15;

    // Date and Summary
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'normal');
    const currentDate = new Date().toLocaleDateString();
    pdf.text(`Generated: ${currentDate}`, margin, yPosition);
    yPosition += 10;

    if (feedbackData.summary_score) {
      pdf.text(`Overall Score: ${feedbackData.summary_score.toFixed(1)}/100`, margin, yPosition);
      yPosition += 15;
    }

    // Topics and Scores Section
    pdf.setFontSize(16);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Topics and Scores:', margin, yPosition);
    yPosition += 10;

    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'normal');
    
    if (feedbackData.topics && feedbackData.scores) {
      for (let i = 0; i < feedbackData.topics.length; i++) {
        const topic = feedbackData.topics[i];
        const score = feedbackData.scores[i];
        pdf.text(`â€¢ ${topic}: ${score}/100`, margin + 10, yPosition);
        yPosition += 8;
        
        // Check if we need a new page
        if (yPosition > pageHeight - 30) {
          pdf.addPage();
          yPosition = margin;
        }
      }
    }

    yPosition += 10;

    // Feedback Section
    pdf.setFontSize(16);
    pdf.setFont('helvetica', 'bold');
    pdf.text('AI Feedback:', margin, yPosition);
    yPosition += 10;

    pdf.setFontSize(11);
    pdf.setFont('helvetica', 'normal');
    
    if (feedbackData.feedback) {
      const maxTextWidth = pageWidth - 2 * margin;
      yPosition = addWrappedText(feedbackData.feedback, margin, yPosition, maxTextWidth, 7);
    }

    yPosition += 15;

    // Resources Section
    if (feedbackData.resources && feedbackData.resources.length > 0) {
      pdf.setFontSize(16);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Recommended Resources:', margin, yPosition);
      yPosition += 10;

      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      
      feedbackData.resources.forEach((resource, index) => {
        if (yPosition > pageHeight - 40) {
          pdf.addPage();
          yPosition = margin;
        }
        
        pdf.text(`${index + 1}. ${resource.title || resource}`, margin + 10, yPosition);
        yPosition += 8;
        
        if (resource.description) {
          pdf.setFontSize(10);
          yPosition = addWrappedText(resource.description, margin + 15, yPosition, pageWidth - 2 * margin - 15, 6);
          yPosition += 5;
        }
        
        if (resource.url) {
          pdf.setFontSize(10);
          pdf.setTextColor(0, 0, 255);
          pdf.text(`Link: ${resource.url}`, margin + 15, yPosition);
          pdf.setTextColor(0, 0, 0);
          yPosition += 8;
        }
        
        pdf.setFontSize(12);
        yPosition += 3;
      });
    }

    // Footer
    pdf.setFontSize(8);
    pdf.setFont('helvetica', 'italic');
    pdf.text('Generated by AI Learning Platform', pageWidth / 2, pageHeight - 10, { align: 'center' });

    // Save the PDF
    const filename = isCurrentSession 
      ? `feedback_report_${currentDate.replace(/\//g, '-')}.pdf`
      : `feedback_report_${feedbackData.id || 'unknown'}.pdf`;
    
    pdf.save(filename);
    
    return true;
  } catch (error) {
    console.error('Error generating PDF:', error);
    return false;
  }
};

export const exportHistoryToPDF = async (submissions) => {
  try {
    const pdf = new jsPDF();
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    const margin = 20;
    let yPosition = margin;

    // Header
    pdf.setFontSize(20);
    pdf.setFont('helvetica', 'bold');
    pdf.text('ðŸ“ˆ Learning Progress Report', pageWidth / 2, yPosition, { align: 'center' });
    yPosition += 15;

    // Summary
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'normal');
    pdf.text(`Total Assessments: ${submissions.length}`, margin, yPosition);
    yPosition += 8;

    if (submissions.length > 0) {
      const avgScore = submissions.reduce((sum, s) => sum + s.summary_score, 0) / submissions.length;
      pdf.text(`Average Score: ${avgScore.toFixed(1)}/100`, margin, yPosition);
      yPosition += 15;
    }

    // Submissions
    submissions.forEach((submission, index) => {
      if (yPosition > pageHeight - 50) {
        pdf.addPage();
        yPosition = margin;
      }

      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'bold');
      pdf.text(`Assessment #${submission.id}`, margin, yPosition);
      yPosition += 8;

      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'normal');
      pdf.text(`Date: ${new Date(submission.timestamp).toLocaleDateString()}`, margin, yPosition);
      pdf.text(`Score: ${submission.summary_score.toFixed(1)}/100`, margin + 80, yPosition);
      yPosition += 10;

      // Topics
      pdf.setFontSize(9);
      submission.topics.forEach((topic, i) => {
        pdf.text(`â€¢ ${topic}: ${submission.scores[i]}/100`, margin + 10, yPosition);
        yPosition += 6;
      });

      yPosition += 10;
    });

    pdf.save(`learning_progress_${new Date().toISOString().split('T')[0]}.pdf`);
    return true;
  } catch (error) {
    console.error('Error generating history PDF:', error);
    return false;
  }
};